generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  username  String    @unique
  password  String
  role      String    @default("user")
  createdAt DateTime  @default(now())

  comments  Comment[]
}

model PageContent {
  id        String      @id @default(uuid())
  pageSlug  String      @unique
  title     String
  content   String   @db.Text  // Use Text for larger content
  heroImage String
  images    String[]
  updatedAt DateTime    @updatedAt
}

model AboutPost {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text  // Allows formatted content (HTML)
  date      DateTime @default(now())
}

model HomePost {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text  // Allows formatted content (HTML)
}

model ExecMember {
  id        String   @id @default(uuid())
  name      String
  position  String
  imageUrl  String
  order     Int
  createdAt DateTime @default(now())
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  post      NewsPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
}

model Category {
  id           String        @id @default(uuid())
  name         String
  slug         String        @unique
  newsPosts    NewsPostCategory[]
  galleryPosts GalleryImageCategory[]  // Updated to reflect the join table for gallery images
  createdAt    DateTime      @default(now())
}

model NewsPost {
  id          String            @id @default(uuid())
  title       String
  content     String
  image       String
  date        DateTime          @default(now())
  comments    Comment[]
  categories  NewsPostCategory[]   // Relation via join table
}

model NewsPostCategory {
  newsPostId String
  categoryId String
  newsPost   NewsPost @relation(fields: [newsPostId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([newsPostId, categoryId]) // Composite primary key
}

model GalleryImage {
  id          String     @id @default(uuid())
  title       String
  description String
  imageUrl    String
  date        DateTime   @default(now())
  categories  GalleryImageCategory[]  // Relation via join table
}

model GalleryImageCategory {
  galleryImageId String
  categoryId     String
  galleryImage   GalleryImage @relation(fields: [galleryImageId], references: [id])
  category       Category     @relation(fields: [categoryId], references: [id])

  @@id([galleryImageId, categoryId]) // Composite primary key
}

